git init
    .git folder is created where histories are tracked

git add <files>
git status
git config --global user.name damien                    //글로벌 설정 : 내가 초래한 변경의 track down을 위함
git config --global user.email damien.seoul@gmail.com   //글로벌 설정 : 내가 초래한 변경의 track down을 위함

git commit -m (inline messaging) ==> VIM이 실행되면 입력을 요구함. 변경 내용을 입력!!
git log ==> shows version history, option [-p] ==> 차이점을 commit 별로
git diff id..id
git diff ==> show differences of files that modified from last commit

* 새로운 버전을 만들기 전에도 변경된 파일들에 대해 git add ..를 통해 추가 하는 작업이 필요하다 
example) git add lib/author.js git.txt ==> commit은 하나의 파일단위로 하는것이 바람직 하나, 여러개의 파일을 선택 해서 할 수 있다. git add <file>로 포함된 파일만 commit의 대상이 된다. 즉 stage area에 놓이게 된다. commit이 된 파일들이 저장된 곳은 repository.

과거 버전으로 회귀:
git reset <id> ==> <id>가 최신 버전인 상태로 돌아감. reset은 가능하면 하지 않는 것이 원칙이다
give revert <id> ==> commit을 취소 하면서 새로운 형태의 버전을 만듬

git branch ==> 현재의 Branch를 보여줌 (master by default)

* new branch
git branch exp ==> 'express'라는 이름의 branch를 현재의 branch인 master의 상태 로부터 분기

* Switch to 'exp' branch
git checkout exp

* to See the difference between branches
git log --branches --decorate --graph (각 branch의 commit상태가 다를때 효율적)
or
git log master..exp (master에는 있고, exp에는 없는것)
or
git diff master..exp

* Merge exp into master
checkout to master, then "git merge exp"

* delete a branch
git branch -d exp